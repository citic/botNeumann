#ifndef GDBRESPONSE_H
#define GDBRESPONSE_H

#include "GdbItemTree.h"
//#include <QObject>
#include <QString>

/// AsyncClass (or reason)
enum class AsyncClass
{
	AC_STOPPED,
	AC_RUNNING,
	AC_THREAD_CREATED,
	AC_THREAD_GROUP_ADDED,
	AC_THREAD_GROUP_STARTED,
	AC_LIBRARY_LOADED,
	AC_BREAKPOINT_MODIFIED,
	AC_THREAD_EXITED,
	AC_THREAD_GROUP_EXITED,
	AC_LIBRARY_UNLOADED,
	AC_THREAD_SELECTED,
	AC_DOWNLOAD,
	AC_CMD_PARAM_CHANGED,

	AC_UNKNOWN
};

/// For RESULT records generated by GDB, such as '(gdb)'
enum GdbResult
{
	GDB_DONE = 0,
	GDB_RUNNING,
	GDB_CONNECTED,
	GDB_ERROR,
	GDB_EXIT,
	GDB_UNKNOWN
};

class GdbResponseListener /* : public QObject */
{
//	Q_OBJECT

  public:
	/// Async records are used to notify the gdb/mi client of additional changes that have occurred.
	///	Those changes can either be a consequence of gdb/mi commands (e.g., a breakpoint modified)
	///	or a result of target activity (e.g., target stopped). The following is the list of possible
	///	async records:
	///		*running,thread-id="thread"
	///		*stopped,reason="reason",thread-id="id",stopped-threads="stopped",core="core"
	///	@see https://sourceware.org/gdb/onlinedocs/gdb/GDB_002fMI-Async-Records.html
	virtual void onExecAsyncOut(const GdbItemTree& tree, AsyncClass asyncClass) = 0;
	/// Notifications that begin with '+'
	/// @see https://sourceware.org/gdb/onlinedocs/gdb/GDB_002fMI-Async-Records.html
	virtual void onStatusAsyncOut(const GdbItemTree& tree, AsyncClass asyncClass) = 0;
	/// Notifications that begin with '=', for example '=thread-group-added,id="id"'
	/// @see https://sourceware.org/gdb/onlinedocs/gdb/GDB_002fMI-Async-Records.html
	virtual void onNotifyAsyncOut(const GdbItemTree& tree, AsyncClass asyncClass) = 0;
	/// Additional out-of-band notifications:
	///   "^done[,results]": The synchronous operation was successful, results are provided
	///   "^running": Deprecated. Equivalent to ‘^done’
	///   "^connected": gdb has connected to a remote target.
	///   "^error,msg=c-string[,code=c-string]": The operation failed.
	///   "^exit": gdb has terminated.
	/// @see https://sourceware.org/gdb/onlinedocs/gdb/GDB_002fMI-Result-Records.html
	virtual void onResult(const GdbItemTree& tree) = 0;
	/// gdb internally maintains a number of output streams: the console (~), the target (@), and
	/// the log (&). The console output stream ('~') contains text that should be displayed in the
	/// CLI console window. It contains the textual responses to CLI commands.
	virtual void onConsoleStreamOutput(const QString& str) = 0;
	/// The target output stream (@) contains any textual output from the running target. This is
	/// only present when GDB's event loop is truly asynchronous, which is currently only the case
	/// for remote targets.
	virtual void onTargetStreamOutput(const QString& str) = 0;
	/// The log stream contains debugging messages being produced by gdb's internals.
	virtual void onLogStreamOutput(const QString& str) = 0;
};

/** Parses the output generated by GDB when a command is executed by GDB **/
class GdbResponse
{
  public:
	typedef enum
	{
		UNKNOWN = 0,
		RESULT,
		CONSOLE_STREAM_OUTPUT,
		TARGET_STREAM_OUTPUT,
		LOG_STREAM_OUTPUT,
		TERMINATION,
		STATUS_ASYNC_OUTPUT,
		NOTIFY_ASYNC_OUTPUT,
		EXEC_ASYNC_OUTPUT,

		TYPE_COUNT
	} Type;

  protected:
	/// The type of output message/line generated by GDB
	Type type;
	/// If this output comes from an ASYNC GDB line, this is the "type" of record
	/// something like "thread-created" or "thread-group-added" or "running" or "stopped"
	AsyncClass reason;
	/// If this output is a RESULT record, this is the reason of the result
	GdbResult result = GDB_UNKNOWN;
	/// The text in stream records, e.g: ~"Copyright (C) 2015 Free Software Foundation, Inc.\n"
	QString text;
	/// A tree of items that are part of the generated line by GDB, when a text is not enough?
	GdbItemTree itemTree;

  public:
	/// Constructor
	explicit GdbResponse(Type type) : type(type) { }

	/// Get the enumeration type of this GDB response
	inline Type getType() const { return type; }
	/// Changes the type of this output response
	void setType(Type type);
	/// Get a text version of the type of this output response
	inline QString getTypeString() const { return mapTypeToString(this->type); }
	/// Maps the given ASYNC reason to the enumeration value
	static const char* mapTypeToString(Type outputType);

	/// Get access to the stream record text
	inline const QString& getText() const { return text; }
	/// Sets the stream record text
	inline void setText(const QString& text) { this->text = text; }

	/// Get a text version of the type of this output response
	inline QString getReasonString() const { return mapReasonToString(this->reason); }
	/// Maps the given ASYNC reason to the enumeration value
	static AsyncClass mapTextToReason(const QString& reason);
	/// Maps the given ASYNC reason to the enumeration value
	static const char* mapReasonToString(AsyncClass outputType);

	/// Get access to the result type if this is a RESULT record
	inline GdbResult getResult() const { return result; }
	/// Changes the result type if this is a RESULT record
	inline void setResult(GdbResult result)  { this->result = result; }
	/// Maps the given text to the enumeration value
	static GdbResult mapTextToResult(const QString& resultClass);
	/// Maps the given result type to a string
	static const char* mapResultToString(GdbResult result);
	/// Give s textual description of the result type of this output
	inline QString getResultString() const { return mapResultToString(this->result); }

	/// Get read-write access to the item tree
	inline GdbItemTree& getItemTree() { return this->itemTree; }
	/// Get read-only access to the item tree
	inline const GdbItemTree& getItemTree() const { return this->itemTree; }
	/// Shortcut to access the root item
	inline GdbTreeNode* getRootItem() { return itemTree.getRoot(); }

	/// @brief Parses 'ASYNC-OUTPUT' type
	/// @return 0 on success, -1 on error
	int parseAsyncOutput(const QString& reason);
	/// Builds a description of this output response
	/// @param includeItemTree true if the item tree should be included in description
	QString buildDescription(bool includeItemTree) const;
	/// Alerts the given listener this response was processed
	void dispatchTo(GdbResponseListener* listener);
};

#endif // GDBRESPONSE_H
