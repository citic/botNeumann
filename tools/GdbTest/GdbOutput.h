#ifndef GDBOUTPUT_H
#define GDBOUTPUT_H

#include <QString>

enum class AsyncClass
{
	AC_STOPPED,
	AC_RUNNING,
	AC_THREAD_CREATED,
	AC_THREAD_GROUP_ADDED,
	AC_THREAD_GROUP_STARTED,
	AC_LIBRARY_LOADED,
	AC_BREAKPOINT_MODIFIED,
	AC_THREAD_EXITED,
	AC_THREAD_GROUP_EXITED,
	AC_LIBRARY_UNLOADED,
	AC_THREAD_SELECTED,
	AC_DOWNLOAD,
	AC_CMD_PARAM_CHANGED,

	AC_UNKNOWN
};

/** Parses the output generated by GDB when a command is executed by GDB **/
class GdbOutput
{
  public:
	typedef enum
	{
		UNKNOWN = 0,
		RESULT,
		CONSOLE_STREAM_OUTPUT,
		TARGET_STREAM_OUTPUT,
		LOG_STREAM_OUTPUT,
		TERMINATION,
		STATUS_ASYNC_OUTPUT,
		NOTIFY_ASYNC_OUTPUT,
		EXEC_ASYNC_OUTPUT,
	} Type;

  protected:
	///
	Type type;
	/// If this output comes from an ASYNC GDB line, this is the "type" of record
	/// something like "thread-created" or "thread-group-added" or "running" or "stopped"
	AsyncClass reason;

  public:
	explicit GdbOutput(Type type) : type(type) { }
	inline Type getType() const { return type; }
	void setType(Type type);

	/// Maps the given ASYNC reason to the enumeration value
	static AsyncClass mapAsyncText(const QString& reason);
	/// @brief Parses 'ASYNC-OUTPUT' type
	/// @return 0 on success, -1 on error
	int parseAsyncOutput(const QString& reason);
};

#endif // GDBOUTPUT_H
