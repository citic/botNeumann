#ifndef GDBOUTPUT_H
#define GDBOUTPUT_H

#include "GdbItemTree.h"
#include <QString>

/// AsyncClass (or reason)
enum class AsyncClass
{
	AC_STOPPED,
	AC_RUNNING,
	AC_THREAD_CREATED,
	AC_THREAD_GROUP_ADDED,
	AC_THREAD_GROUP_STARTED,
	AC_LIBRARY_LOADED,
	AC_BREAKPOINT_MODIFIED,
	AC_THREAD_EXITED,
	AC_THREAD_GROUP_EXITED,
	AC_LIBRARY_UNLOADED,
	AC_THREAD_SELECTED,
	AC_DOWNLOAD,
	AC_CMD_PARAM_CHANGED,

	AC_UNKNOWN
};

/** Parses the output generated by GDB when a command is executed by GDB **/
class GdbOutput
{
  public:
	typedef enum
	{
		UNKNOWN = 0,
		RESULT,
		CONSOLE_STREAM_OUTPUT,
		TARGET_STREAM_OUTPUT,
		LOG_STREAM_OUTPUT,
		TERMINATION,
		STATUS_ASYNC_OUTPUT,
		NOTIFY_ASYNC_OUTPUT,
		EXEC_ASYNC_OUTPUT,

		TYPE_COUNT
	} Type;

  protected:
	/// The type of output message/line generated by GDB
	Type type;
	/// If this output comes from an ASYNC GDB line, this is the "type" of record
	/// something like "thread-created" or "thread-group-added" or "running" or "stopped"
	AsyncClass reason;
	/// A tree of items that are part of the generated line by GDB
	GdbItemTree itemTree;

  public:
	/// Constructor
	explicit GdbOutput(Type type) : type(type) { }

	/// Get the enumeration type of this GDB response
	inline Type getType() const { return type; }
	/// Changes the type of this output response
	void setType(Type type);
	/// Get a text version of the type of this output response
	inline QString getTypeString() const { return mapTypeToString(this->type); }
	/// Maps the given ASYNC reason to the enumeration value
	static const char* mapTypeToString(Type outputType);

	/// Get a text version of the type of this output response
	inline QString getReasonString() const { return mapReasonToString(this->reason); }
	/// Maps the given ASYNC reason to the enumeration value
	static AsyncClass mapTextToReason(const QString& reason);
	/// Maps the given ASYNC reason to the enumeration value
	static const char* mapReasonToString(AsyncClass outputType);

	/// @brief Parses 'ASYNC-OUTPUT' type
	/// @return 0 on success, -1 on error
	int parseAsyncOutput(const QString& reason);
	/// Builds a description of this output response
	/// @param includeItemTree true if the item tree should be included in description
	QString buildDescription(bool includeItemTree) const;
	/// Shortcut to access the root item
	inline GdbTreeNode* getRootItem() { return itemTree.getRoot(); }
};

#endif // GDBOUTPUT_H
