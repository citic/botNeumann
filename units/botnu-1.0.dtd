<!-- botnu.dtd version 1.0 - Jeisson Hidalgo-Cespedes -->

<!--
A botnu is a botNeumann Unit, a level of the game. A level is a problem that must be solved by
programming a solution. A botnu is a description of this problem and how to solve it. It is a
description as any other problem used in programming contests. In botNeumann they are called units,
because the visualization depicts them as processing units. Attributes:

id
	Unique identifier for the unit in the world. File must be named as <id>.botnu to make
	processing faster. The uniqueness is providen by a [future] repository of units.

version
	An unit can change over time. This attribute can be used to track the progress of the unit.
	botNeumann may eventually use it for updating purposes. If omitted, "1.0" is assumed.

botnu-version
	The version of the botnu XML notation used. It may be used by botNeumann to know how to read
	the file. If omitted, the version of the .dtd file declared in the DOCTYPE section will be
	assumed.

architecture={32|64}
	Specifies the width of the datapaths of the archicture: 32-bits or 64-bits. It affects the
	size of integers and memory addresses (pointers). Default is 32-bits.

cpu-cores
	The number of CPU cores to emulate. They are visualized as available workstations in
	botNeumann. If omitted, 4 cores are assumed.

ram
	Size in bytes of the entire primary memory to emulate. It should be power-of-2 value.
	Default value is 1024

heap-segment={yes|no}
	Specifies if heap segment will be available to solve the problem, and therefore if the heap
	segment will be visible or not. By default it is available and visible. It may be hidden
	for beginning levels, in order to avoid visual cognitive overload produced by students
	watching a complex zone that is not required by the problem/unit. If heap segment is hidden
	and the student uses dynamic memory (malloc function family or new operator), the effect will
	not visualized and the problem will be considered as not solved (student cannot pass to the
	next level). If other value than "yes" or "no" is specified, "yes" will be assumed.

min-threads
	Minimun number of execution threads (represented as robots) that students must implement in
	order to pass the level (fix the damaged unit). Default is 1.

max-threads
	Maximum number of execution threads that students must launch in order to solve the unit.
	Value "0" means infinity number of threads. Default value is 0.

timeout
	Maximun number of milliseconds to run a test case. Students run their solutions in order to pass
	to the next level. botNeumann run their solutions against a set of test cases. A student solution
	must produce the answer in standard output in less time than the value indicated by this
	attribute. Value "0" means infinity time. Default value is 1000 milliseconds (1 second).

ignore-whitespace={yes|no}
	In order to evaluate if sudent's solution is valid, its output is compared against the output
	generated by the solution program or the expected output of test case. If this attribute has
	the value "yes", the output will be compared ignoring whitespace differences. If this
	attribute is "no" and there are whitespace differences between the student's output and the
	expected output, the student's solution will be considered as erroneous. If a value different
	than "no" is provided, "yes" will be assumed.

case-sensitive={yes|no}
	By default test cases will be compared considering lowercase and uppercase characters as
	different. If this attribute is provided with value "no", standard output and error of player
	solution will be compared ignoring case differences against expected output.
-->
<!ELEMENT botnu (description+, initial-code*, solution*, (standard-generator|file-generator|test-case)+) >
<!ATTLIST botnu
	id                  ID          #REQUIRED
	version             CDATA       "1.0"
	botnu-version       CDATA       "1.0"
	architecture        (32|64)     "32"
	cpu-cores           CDATA       "4"
	ram                 CDATA       "1024"
	heap-segment        (yes|no)    "yes"
	min-threads         CDATA       "1"
	max-threads         CDATA       "0"
	timeout             CDATA       "1"
	ignore-whitespace   (yes|no)    "yes"
	case-sensitive      (yes|no)    "yes">


<!--
A textual (HTML) description of the problem to resolve. A botNeumann unit can have several
descriptions, one for each supported language. The first one will be considered the default.
Note the HTML content must be inside a CDATA section. Attributes:

lang
	A two letters language code. See ISO 639-1 standard. For example, "en" for English.
-->
<!ELEMENT description (#PCDATA)>
<!ATTLIST description lang CDATA #IMPLIED>


<!--
Contains C/C++ code that will be provided to students when they launches the unit for first
time. Initial code may be used to face students to common programming errors or specific
programming concepts. This element is optional. If not initial-code is provided, students
must produce a solution from the scratch for the unit. If several initial-code elements
are provided, botNeumann chooses one of them randomly (i.e., for experimentation).
-->
<!ELEMENT initial-code (#PCDATA)>
<!ATTLIST initial-code lang (c|cpp) "cpp">


<!--
Contains a C++ program that solves the problem. botNeumann use it to compare the output
generated by student's programs against the solution output. For some problems, there are several
valid solutions. If several solutions are provided, botNeumann will choose one randomly.

The solution will receive a test case produced by some standard-generator or by any test case.
The solution must produce the expected output in standard output or standard error or both.
-->
<!ELEMENT solution (#PCDATA)>
<!ATTLIST solution lang (c|cpp) "cpp">


<!--
Contains a C or C++ program that generates some output in standard output. This output will be used
to test student's solutions. Therefore, the output of a standard generator will be redirected to
a bn_N_input.txt file and it will be used as input for student's solutions and for a program
privided in a @a solution element. The student's solution output will be redirected to a
bn_N_output_ps.txt, and the solution output to a 'bn_N_output_ex.txt'. Both files will be compared
in order to know if student's solution is accepted.

If a standard-generator element is provided, a least one solution element must be provided.
If several generator programs are provided, botNeumann will choose one randomly each time students
run their code. If several solution elements are also provided, one of them will be randomly
selected at runtime to check the student's solution output.

The standard-generator program will receive three command line arguments:

	argv[0]  program name itself
	argv[1]  Test case number (nn)
	argv[2]  Total number of test cases that will be generated (NN)

The standard generator must generate the input for test case nn by writing it to standard output.
The expected output of the test cases must be validated by a correct solution program provided in
a least one solution element. If some standard error output must be produced for the test case,
the solution program must produce it.

Any output sent to the standard error by the standard-generator will be concatenated and sent
as command line arguments to the student's solution. Attributes:

lang
	The generator is written in this programming language. Currently "c" and "cpp" are supported.
	This value is used to choose the compiler and the compiler options to build the generator
	executable when the test cases are required.

default-runs
	The expected number of test cases that the botnu's author desires to be produced by botNeumann
	at runtime. The default is 10.
-->
<!ELEMENT standard-generator (#PCDATA)>
<!ATTLIST standard-generator
	lang                (c|cpp)     "cpp"
	default-runs        CDATA       "10">


<!--
Contains a C++ program that generates test cases. The generator receives 7 arguments (argc=7):

	ARGUMENT DESCRIPTION ................................................................... EXAMPLE
	argv[0]..Program generator name itself ........................................ "/tmp/bn_gen_01"
	argv[1]  Test case number (int), starting with 1........................................... "01"
	argv[2]  Total number of test cases that will be finally generated (int)................... "20"
	argv[3]  Path for the test case input file (const char*)................. "/tmp/bn_01_input.txt"
	argv[4]  Path for the test case expected output file (const char*)... "/tmp/bn_01_output_ex.txt"
	argv[5]  Path for the test case expected error file (const char*)..... "/tmp/bn_01_error_ex.txt"
	argv[6]  Path for the test case command line arguments file (const char*). "/tmp/bn_01_args.txt"

The generator code will be compiled and the resulting executable will be called several times.
Each execution will ask to create a test case. For example, if for this unit 20 test cases will be
generated, the generator will called 20 times with the following arguments:

	/tmp/generator 01 20 /tmp/bn_01_input.txt /tmp/bn_01_output_ex.txt ... /tmp/bn_01_args.txt
	/tmp/generator 02 20 /tmp/bn_02_input.txt /tmp/bn_02_output_ex.txt ... /tmp/bn_02_args.txt
	...
	/tmp/generator 20 20 /tmp/bn_20_input.txt /tmp/bn_20_output_ex.txt ... /tmp/bn_20_args.txt

The generator is supposed to create or overwrite the files given by arguments 3 through 6. The
test case's standard input file (bn_##_input.txt) and expected output (bn_##_output_ex.txt) are
the only mandatory files. If no standard error or arguments files are generated, botNeumann will
assume they should be empty. All file names in arguments 3 through 6 must be open for writing.
Their content is interpreted as follows:

	bn_N_args.txt: command line arguments (one per line) for test case N
	bn_N_input.txt: input of the test case N to be sent to the player solution
	bn_N_output_ex.txt: expected output for test case N to be generated by player solution
	bn_N_error_ex.txt: expected standard error output for test case N

The bn_N_args.txt has a line per each argument. When the player solution is being tested, all
lines of arguments file will be read and sent to the player solution executable. Therefore,
arguments with space are naturally managed in this way. The rest of files will not have any
text processing. They will be sent literally to player solution executable.

Generators may be written either C or C++. The language may be specified in the @a lang attribute
of the @generator XML element. Generators may include some code to ease the management
of the expected files to be generated. For example, for a C "sum_xy" generator you may write:

	#include <stdlib.h>
	#include <time.h>
	#include "bn_c_generator.h"

	int main(int argc, char* argv[])
	{
		if ( bn_open_files(argc, argv) != 0 )
			return bn_last_error;

		srand( clock() );
		for ( int index = 0, count = rand() % 10 + 1; index < count; ++index )
		{
			long x1 = rand(), x2 = rand();
			fprintf(bn_input, "%d %d\n", x1, x2);
			fprintf(bn_output_ex, "%d\n", x1 + x2);
		}

		bn_close_files();
	}

The header file "bn_c_generator.h" will create the following global variables and functions:

	int           bn_open_files(int argc, char* argv[]);
	int           bn_close_files();
	int           bn_last_error;

	int           bn_testcase_number;
	int           bn_testcase_count;
	const char*   bn_input_filename;
	const char*   bn_output_ex_filename;
	const char*   bn_error_ex_filename;
	const char*   bn_args_filename;
	FILE*         bn_input;
	FILE*         bn_output_ex;
	FILE*         bn_error_ex;
	FILE*         bn_args;


For a C++ "sum_xy" generator, the "bn_c_generator.h" is also available. But you may prefer using
standard library std::ofstream objects, available in "bn_cpp_generator.h":

	#include <stdlib.h>
	#include <time.h>
	#include "bn_cpp_generator.h"

	int main(int argc, char* argv[])
	{
		botnu bn(argc, argv);
		if ( ! bn )
			return bn.last_error;

		srand( clock() );
		for ( int index = 0, count = rand() % 10 + 1; index < count; ++index )
		{
			long x1 = rand(), x2 = rand();
			bn.input << x1 << ' ' << x2 << std::endl;
			bn.output_ex << x1 + x2 << std::endl;
		}
	}

Including both "bn_c_generator.h" and "bn_cpp_generator.h" is not recommended. They may conflict
trying to write the same files and may produce unexpected runtime errors.

The header "bn_cpp_generator.h" define a `botnu` class with following members:

	class         botnu
	constructor   botnu(int argc, char* argv[])
	destructor    ~botnu()

	int           open_files(int argc, char* argv[])
	int           close_files();
	bool          operator!()

	int           last_error;
	int           testcase_number;
	int           testcase_count;
	const char*   input_filename;
	const char*   output_ex_filename;
	const char*   error_ex_filename;
	const char*   args_filename;
	std::ofstream input;
	std::ofstream output_ex;
	std::ofstream error_ex;
	std::ofstream args;

When player solution is run, generator may be called several times to generate an arbitrary number
of test cases. If several generator programs are provided, botNeumann will choose one randomly each
time students run their code.
-->
<!ELEMENT file-generator (#PCDATA)>
<!ATTLIST file-generator
	lang                (c|cpp)     "cpp"
	default-runs        CDATA       "10">


<!--
Test cases contain manual input and output that is important to test. Test-cases are always
tested before any input generated by the generator programs (see generator elements). A botnu
unit can have several test case elements, or just one with whole the concatenated output.
The latter is more efficient, and it may be more readable. Please note that newline and whitespace
characteres may be important for the input/output of programs.

args
	A space-separated list of texts to be sent to the player solution as command line arguments.
	Player solution must receive them as main function parameters (argc, argv). Currently no
	special processing is made to quotes by botNeumann. Therefore, if a single argument need to
	have whitespace, enclosing it in single or double quotes will not work. In that case a test
	case generator should be used. Arguments are optional.
-->
<!ELEMENT test-case (input, output, error?)>
<!ATTLIST test-case args CDATA #IMPLIED>


<!--
The input of a test case. It will be sent to student's solution as standard input each time
that solution is run. Please note that whitespace must agree with the description you provide
to students. Attributes:
-->
<!ELEMENT input (#PCDATA)>


<!--
The expected output of a test case. The student's solution output will be captured and compared
against the content of this element each time the solution is run. Please note that whitespace
may affect the validity of student's solutions. See botnu.ignore-whitespace attribute.

Currently an output element is mandatory in each test case. In the future the may be optional.
If omitted, a mandatory solution program must be provided (see solution element). In that case,
the input of the test case will be sent to the solution program to get the expected standard
output for that case.
-->
<!ELEMENT output (#PCDATA)>


<!--
The expected standard error output of a test case. The student's solution standar error output
will be captured and compared against the content of this element each time the solution is run.

The error output is optional. If no error output is expected, botNeumann will assume that player
solution should not genearate any error output at all. That is, if player solution generates some
error output, test case will fail. Please note that whitespace may affect the validity of
student's solutions. See botnu.ignore-whitespace attribute.
-->
<!ELEMENT error (#PCDATA)>
