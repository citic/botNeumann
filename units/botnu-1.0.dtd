<!-- botnu.dtd version 1.0 - Jeisson Hidalgo-Cespedes -->

<!--
A botnu is a botNeumann Unit, a level of the game. A level is a problem that must be solved by
programming a solution. A botnu is a description of this problem and how to solve it. It is a
description as any other problem used in programming contest. In botNeumann they are called units,
because the visualization depicts them as processing units. Attributes:

id
	Unique identifier for the unit in the world. File must be named as <id>.botnu to make
	processing faster. The uniqueness is providen by a [future] repository of units.

version
	An unit can change over time. This attribute can be used to track the progress of the unit.
	botNeumann may eventually use it for updating purposes. If omitted, "1.0" is assumed.

botnu-version
	The version of the botnu XML notation used. It may be used by botNeumann to know how to read
	the file. If omitted, the version of the .dtd file declared in the DOCTYPE section will be
	assumed.

architecture={32|64}
	Specifies the width of the datapaths of the archicture: 32-bits or 64-bits. It affects the
	size of integers and memory addresses (pointers). Default is 32-bits.

cpu-cores
	The number of CPU cores to emulate. They are visualized as available workstations in
	botNeumann. If omitted, 4 cores are assumed.

ram
	Size in bytes of the entire primary memory to emulate. It should be power-of-2 value.
	Default value is 1024

heap-segment={yes|no}
	Specifies if heap segment will be available to solve the problem, and therefore if the heap
	segment will be visible or not. By default it is available and visible. It may be hidden
	for beginning levels, in order to avoid visual cognitive overload produced by students
	watching a complex zone that is not required by the problem/unit. If heap segment is hidden
	and the student uses dynamic memory (malloc function family or new operator), the effect will
	not visualized and the problem will be considered as not solved (student cannot pass to the
	next level). If other value than "yes" or "no" is specified, "yes" will be assumed.

min-threads
	Minimun number of execution threads (represented as robots) that students must implement in
	order to pass the level (fix the damaged unit). Default is 1.

max-threads
	Maximum number of execution threads that students must launch in order to solve the unit.
	Value "0" means infinity number of threads. Default value is 0.

timeout
	Maximun number of seconds to answer a test case. Students run their solutions in order to pass
	to the next level. botNeumann send to their solutions a set of test cases. A student solution
	must produce the answer in standard output in less time than the value indicated by this
	attribute. Value "0" means infinity time. Default value is 1 second.

ignore-whitespace={yes|no}
	In order to evaluate if sudent's solution is valid, its output is compared against the output
	generated by the solution program or the expected output of test case. If this attribute has
	the value "yes", the output will be compared ignoring whitespace differences. If this
	attribute is "no" and there are whitespace differences between the student's output and the
	expected output, the student's solution will be considered as erroneous. If a value different
	than "no" is provided, "yes" will be assumed.
-->
<!ELEMENT botnu (description+, initial-code*, solution*, (generator|test-case)+) >
<!ATTLIST botnu
	id					ID			#REQUIRED
	version				CDATA		"1.0"
	botnu-version		CDATA		"1.0"
	architecture    	(32|64)		"32"
	cpu-cores			CDATA		"4"
	ram					CDATA		"1024"
	heap-segment		(yes|no)	"yes"
	min-threads			CDATA		"1"
	max-threads			CDATA		"0"
	timeout				CDATA		"1"
	ignore-whitespace	(yes|no)	"yes">


<!--
A textual (HTML) description of the problem to resolve. A botNeumann unit can have several
descriptions, one for each supported language. The first one will be considered the default.
Note the HTML content should be inside a CDATA section. Attributes:

lang
	A two letters language code. See ISO 639-1 standard. For example, "en" for English.
-->
<!ELEMENT description (#PCDATA)>
<!ATTLIST description lang CDATA #IMPLIED>


<!--
Contains C++ code that will be provided to students when they launches the unit for first
time. Initial code may be used to face students to common programming errors or specific
programming concepts. This element is optional. If not initial-code is provided, students
must produce a solution from the scratch for the unit. If several initial-code elements
are provided, botNeumann chooses one of them randomly (i.e., for experimentation).
-->
<!ELEMENT initial-code (#PCDATA)>


<!--
Contains a C++ program that solves the problem. botNeumann use it to compare the output
generated by student's programs against the solution output. For some problems, there are several
valid solutions. If several solutions are provided, botNeumann will choose one randomly.
-->
<!ELEMENT solution (#PCDATA)>


<!--
Contains a C++ program that generates some output. This output will be used to test student's
solutions. Therefore, the output of the generator will be used as input for student's solutions
and the unit solution (see element solution). If several generator programs are provided,
botNeumann will choose one randomly each time students run their code.
-->
<!ELEMENT generator (#PCDATA)>


<!--
Test cases contain manual input and output that is important to test. Test-cases are always
tested before any input generated by the generator program (see generator element). A botnu
unit can have several test case elements, or just one with whole the concatenated output.
The latter is more efficient, an may be more readable. Please note that newline and whitespace
characteres may be important for the input/output of programs.
-->
<!ELEMENT test-case (input, output)>


<!--
The input of a test case. It will be sent to student's solution as standard input each time
that solution is run. Please note that whitespace must agree with the description you provide
to students.
-->
<!ELEMENT input (#PCDATA)>


<!--
The expected output of a test case. The student's solution output will be captured and compared
against the content of this element each time the solution is run. Please note that whitespace
may affect the validity of student's solutions. See botnu.ignore-whitespace attribute.
-->
<!ELEMENT output (#PCDATA)>
