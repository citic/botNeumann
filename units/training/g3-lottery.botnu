<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE botnu SYSTEM "../botnu-1.0.dtd">

<botnu id="g3-lottery" version="1.0" architecture="32" cpu-cores="2" ram="512" heap-segment="no" min-threads="1" timeout="1000" ignore-whitespace="yes">

<description lang="es"><![CDATA[<h2>Lotería</h2>

<p>Se quiere un objeto que pueda indicar si números de lotería tienen o no premio por coincidir con el mayor o coincidir la terminación. El programa recibe en la primera línea el número favorecido, y en las subsecuentes líneas los números que se quieren probar.</p>

<p><strong>Ejemplo de entrada</strong>:</p>
<pre>13

76
13
12
93
</pre>

<p><strong>Ejemplo de salida</strong>:</p>
<pre>76: Suerte para la proxima
13: Mayor!
12: Suerte para la proxima
93: Terminacion!
</pre>
]]></description>

<initial-code lang="cpp"><![CDATA[#include <iostream>
using namespace std;

int mayor;

class Loteria
{
private:
	int terminacion;

public:
	Loteria()
	{
		terminacion = mayor % 10;
	}

	void clasificar(int numero)
	{
		cout << numero << ": ";
		if ( numero == mayor )
			cout << "Mayor!\n";
		else if ( numero % 10 == terminacion )
			cout << "Terminacion!\n";
		else
			cout << "Suerte para la proxima\n";
	}
};

Loteria loteria;

int main()
{
	cin >> mayor;
	int numero = 0;
	while ( cin >> numero )
		loteria.clasificar(numero);
}
]]></initial-code>

<solution lang="cpp"><![CDATA[#include <iostream>
using namespace std;

int mayor;

class Loteria
{
private:
	int terminacion;

public:
	Loteria()
	{
		terminacion = mayor % 10;
	}

	void clasificar(int numero)
	{
		cout << numero << ": ";
		if ( numero < 0 || numero >= 100 )
			cout << "Numero no valido\n";
		else if ( numero == mayor )
			cout << "Mayor!\n";
		else if ( numero % 10 == terminacion )
			cout << "Terminacion!\n";
		else
			cout << "Suerte para la proxima\n";
	}
};


int main()
{
	cin >> mayor;
	Loteria loteria;
	int numero = 0;
	while ( cin >> numero )
		loteria.clasificar(numero);
}

]]></solution>

<standard-generator lang="cpp" default-runs="3"><![CDATA[#include <cstdlib>
#include <ctime>
#include <iostream>

int grand(int min, int max)
{
	return rand() % (max - min) + min;
}

int main()
{
	srand( time(0) + clock() );
	std::cout << grand(0, 100) << "\n\n";

	int n = grand(1, 11);
	for ( int i = 0; i < n; ++i )
		switch ( grand(0,10) )
		{
			case 9: std::cout << 0 - grand(0, 10) << '\n'; break;
			case 8: std::cout << 100 + grand(0, 10) << '\n'; break;
			default: std::cout << grand(0, 100) << '\n'; break;
		}

	return 0;
}

]]></standard-generator>

<test-case>
<input>13

76
13
12
93
</input>
<output>76: Suerte para la proxima
13: Mayor!
12: Suerte para la proxima
93: Terminacion!
</output>
</test-case>

<test-case>
<input>70

60
65
69
70
71
75
</input>
<output>60: Terminacion!
65: Suerte para la proxima
69: Suerte para la proxima
70: Mayor!
71: Suerte para la proxima
75: Suerte para la proxima
</output>
</test-case>

<test-case>
<input>77

7
17
27
77
97
71
</input>
<output>7: Terminacion!
17: Terminacion!
27: Terminacion!
77: Mayor!
97: Terminacion!
71: Suerte para la proxima
</output>
</test-case>

<test-case>
<input>62

-62
-2
2
62
72
162
</input>
<output>-62: Numero no valido
-2: Numero no valido
2: Terminacion!
62: Mayor!
72: Terminacion!
162: Numero no valido
</output>
</test-case>

</botnu>
