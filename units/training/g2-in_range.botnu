<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE botnu SYSTEM "../botnu-1.0.dtd">

<botnu id="g2-in_range" version="1.0" architecture="32" cpu-cores="2" ram="512" heap-segment="no" min-threads="1" timeout="1000" ignore-whitespace="yes">

<description lang="es"><![CDATA[<h2>En rango</h2>

<p>Un programa recibe un rango de referencia entero en la primera línea de la entrada estándar. Luego recibe valores de resultados que deberían estar dentro del rango, uno por línea. El programa debe indicar cuáles de estos valores se encuentran fuera de rango de referencia en la salida estándar.</p>

<h3>Ejemplo de entrada:</h3>

<pre>70 100

95
65
100
150
</pre>

<h3>Ejemplo de salida</h3>

<pre>65
150</pre>

]]></description>

<initial-code lang="cpp"><![CDATA[#include <iostream>
using namespace std;

unsigned int minimo, maximo;

bool en_rango(int valor)
{
	if ( minimo < valor < maximo )
		return true;
	else
		return false;
}

void clasificar(int valor)
{
	if ( ! en_rango(valor) )
		cout << valor << endl;
}

int main()
{
	cin >> minimo >> maximo;
	int valor;
	while ( cin >> valor )
		clasificar(valor);
}
]]></initial-code>

<solution lang="cpp"><![CDATA[#include <iostream>
using namespace std;

int minimo, maximo;

bool en_rango(int valor)
{
	if ( valor >= minimo && valor <= maximo )
		return true;
	else
		return false;
}

void clasificar(int valor)
{
	if ( ! en_rango(valor) )
		cout << valor << endl;
}

int main()
{
	cin >> minimo >> maximo;
	int valor;
	while ( cin >> valor )
		clasificar(valor);
}
]]></solution>

<standard-generator lang="cpp" default-runs="2"><![CDATA[#include <cstdlib>
#include <ctime>
#include <iostream>

int grand(int min, int max)
{
	return rand() % (max - min) + min;
}

int main()
{
	srand( time(0) + clock() );
	int a = grand(-100, 1000);
	int b = grand(a, 1000);
	std::cout << a << ' ' << b << "\n\n";

	int n = grand(1, 11);
	for ( int i = 0; i < n; ++i )
		switch ( grand(0,3) )
		{
			case 0: std::cout << grand(a, b) << '\n'; break;
			case 1: std::cout << a - grand(a, b) << '\n'; break;
			case 2: std::cout << b + grand(a, b) << '\n'; break;
		}

	return 0;
}
]]></standard-generator>

<test-case>
<input>70 100

95
65
100
150
</input>
<output>65
150
</output>
</test-case>

<test-case>
<input>100 200

-100
-50
0
50
100
150
200
250
</input>
<output>-100
-50
0
50
250
</output>
</test-case>

<test-case>
<input>-100 100

-150
-100
-50
0
50
100
150
200
</input>
<output>-150
150
200
</output>
</test-case>

<test-case>
<input>-25 0

-27
-22
-16
-8
-0
7
8509
7654
</input>
<output>-27
7
8509
7654
</output>
</test-case>

</botnu>
