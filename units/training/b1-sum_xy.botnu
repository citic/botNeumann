<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE botnu SYSTEM "../botnu-1.0.dtd">


<botnu id="b1-sum_xy" version="1.0" architecture="32" cpu-cores="2" ram="512" heap-segment="no" min-threads="1" timeout="1000" ignore-whitespace="yes">



<description lang="es"><![CDATA[
<h1>Sumador simple</h1>

<p>Este microcontrolador era un simple sumador de enteros. Nada sofisticado. Quizá por eso poco fue afectado por los hackers. Todo el código se recuperó legbile menos una línea.</p>

<p>Los microcontroladores no trabajan en solitario, sino que son parte de un gran sistema de microcontroladores interconectados. Los microcontroladores se comunican unos con otros por tubos neumáticos. Un microcontrolador recibe datos de otros microcontroladores a través de un tubo de entrada, conocido como <em>entrada estándar</em> (<code>std::cin</code> en C++). El microcontrolador hace su tarea y envía el resultado a otros microcontroladores a través del tubo de <em>salida estándar</em> (<code>std::cout</code> en C++).</p>

<p>Algunos microcontroladores, como este sumador de enteros, se mantienen encendidos procesando largas secuencias de entrada, y se apagan sólo hasta que no haya más entrada. Hay una razón para ello, y es ahorro de energía. Encender y apagar un microcontrolador requiere recursos. Por eso el sistema espera que el sumador de enteros no sólo reciba una única pareja de enteros, sino muchas parejas de enteros. Por eso la lectura y procesamiento debe hacerse en un ciclo, como el siguiente:</p>

<pre><code>long a, b;
while ( std::cin &gt;&gt; a &gt;&gt; b )
{

}
</code></pre>

<p>El sistema avisa al microcontrolador que ya se ha terminado la entrada y que puede apagarse, enviándole un dato especial, conocido en C++ como <code>EOF</code> (end-of-file). Cuando <code>std::sin</code> ve este dato <code>EOF</code>, rompe el ciclo, el programa termina y el microcontrolador se apaga.</p>

<p>Ahora sólo falta recuperar la línea que imprime la suma de los dos números leídos! (línea 9). C++ reconoce las siguientes operaciones con números:</p>

<table>
	<tr><td>+</td><td>Suma</td></tr>
	<tr><td>-</td><td>Resta</td></tr>
	<tr><td>*</td><td>Multiplicación</td></tr>
	<tr><td>/</td><td>División</td></tr>
	<tr><td>%</td><td>Residuo de la división entera</td></tr>
</table>

<h2>Ejemplo de entrada</h2>

<p>Debe recibir parejas de dos enteros separadas por un espacio en blanco. Las parejas se separan entre ellas por cambios de línea. Los enteros son mayores a un millón negativo y menores a un millón positivo.</p>

<pre><code>2 5
-4 7
100 -0
-80 -120
</code></pre>

<h2>Ejemplo de salida</h2>

<p>Debe imprimir el resultado de la suma de cada pareja. Un resultado por línea.</p>

<pre><code>7
3
100
-200
</code></pre>
]]></description>



<initial-code lang="cpp"><![CDATA[#include <iostream>
using namespace std;

int main()
{
	int a = 0, b = 0;
	while ( cin >> a >> b )
	{

	}

	return 0;
}
]]></initial-code>



<solution lang="cpp"><![CDATA[#include <iostream>
using namespace std;

int main()
{
	int x = 0, y = 0;
	while ( cin >> x >> y )
	{
		cout << x + y << endl;
	}

	return 0;
}
]]></solution>



<standard-generator lang="cpp" default-runs="5"><![CDATA[#include <cstdlib>
#include <ctime>
#include <iostream>

long grand(long min, long max)
{
	return rand() % (max - min) + min;
}

int main()
{
	srand( time(0) + clock() );
	for ( int index = 0, count = rand() % 11; index < count; ++index )
		std::cout << grand(-1000000, 1000000) << ' ' << grand(-1000000, 1000000) << std::endl;

	return 0;
}
]]></standard-generator>



<test-case>
<input>0 -0
2 5
-4 7
100 -0
-80 -120
-999999 -999999
</input>

<output>0
7
3
100
-200
-1999998
</output>
</test-case>



</botnu>
