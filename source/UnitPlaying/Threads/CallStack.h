#ifndef CALLSTACK_H
#define CALLSTACK_H

#include "RectLayoutItem.h"

#include <QObject>
#include <QStack>

class GdbItemTree;
class GdbTreeNode;
class MemoryFrame;

/**
	Manages the stack of function calls for an execution thread. This class is able to do
	function call operations such as:

	- raise a stack frame when a function is called (from the CPU core's memory interface)
	- dive the stack frame (function call) when the function returns,
	- show a stack frame on top of others temporally when user selects it or during parameter-passing
*/
class CallStack : public QObject, public RectLayoutItem
{
	Q_OBJECT
	Q_DISABLE_COPY(CallStack)

  protected:
	/// The thread id that owns this call stack
	int threadId = 0;
	/// The memory address of the first byte assigned for stack memory to this execution thread
	size_t startByte = 0;
	/// The maximum size in bytes that the call stack can grow
	size_t maxSize = 0;
	/// The size in bytes of each memory row of the stack segment
	size_t rowSize = 0;
	/// The stack of frames or function calls
	QStack<MemoryFrame*> stackFrames;
	/// Counts the number of local variable watches for each stack frame
	QStack<int> watchCounts;
	/// Default number of rows in CPU cores
	qreal cpuCoreRows = 0.0;

  public:
	/// Constructor
	/// @param threadId We require the thread id to create watches
	CallStack(int threadId, size_t startByte, size_t rowSize, size_t maxSize, qreal zValue, QGraphicsItem* graphicsParentItem);
	/// Set the rows of the CPU where this call stack should be displayed
	inline void setCpuCoreRows(qreal cpuCoreRows) { this->cpuCoreRows = cpuCoreRows; }
	/// Animate a function call
	/// @param tree The GDB's tree generated by a breakpoint hit at the called function body
	/// @return The milliseconds required by the animation
	/// @remarks Be sure that cpuCoreRows is not zero before calling this method
	int callFunction(const GdbItemTree& tree, int initialDelay = 0);
	/// Animate this set of stack frames appearing from the basement. This method is called when
	/// an execution thread was sleeping and CPU was assigned again
	/// @param initialDelay The animation will start this amount of milliseconds later of this
	/// function call. It may be used to wait until the CPU's memory interface is completely open
	/// @return The amount of milliseconds of the complete animation
	int animateAppear(int initialDelay = 0);
	/// Animate the entire fame stack diving into the basement
	/// @see animateAppear()
	int animateDisappear(int initialDelay = 0);
	/// Create parameters and local variable in the top-most function call
	/// @param gdbVariableArray Gdb node result that lists the local variables to be shown
	int createLocalVariables(const GdbTreeNode* gdbVariableArray, int initialDelay);
	/// Create one variable in the stack of the top-most function call
	int createLocalVariable(const GdbTreeNode* variableNode, MemoryFrame* functionCall, int initialDelay);
	/// Animate a function return
	/// @return The milliseconds required by the animation
	int returnFunction(int initialDelay = 0);

  protected slots:
	/// Called when the innermost function return animation is finished in order to delete the stack
	/// frame and its memory mappings
	bool removeFunctionCall();

  protected:
	/// Get the watch name for a local variable for the topmost stack frame
	/// @param Number of the local variable, if -1 a new number will be assigned
	QString buildWatchName(int variableNumber = -1);
};

#endif // CALLSTACK_H
