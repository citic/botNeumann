#include "BotNeumannApp.h"
#include "Compiler.h"
#include "Diagnostic.h"
#include "MessagesDockWidget.h"
#include <QListWidget>
#include <QTabWidget>
#include <QTextEdit>

MessagesDockWidget::MessagesDockWidget(QWidget* parent, Qt::WindowFlags flags)
	: QDockWidget("Messages", parent, flags)
{
	// QMainWindow requires all its direct children have a name to store preferences
	setObjectName("messagesDockWidget");

	// Each message control is placed within a tab control
	messagesTabWidget = new QTabWidget(this);
	setWidget(messagesTabWidget);

	// Add the first tab (page): the unit problem description
	unitDescription = new QTextEdit();
	unitDescription->setReadOnly(true);
	unitDescription->document()->setDefaultFont(BotNeumannApp::getRobotFont());
	unitDescription->document()->setDefaultStyleSheet("pre { margin-left: 1em; background: #ddd; }");
	QIcon unitDescriptionIcon(":/button_information.svg");
	messagesTabWidget->addTab(unitDescription, unitDescriptionIcon, tr("Description"));

	// Add the second tab: output generated by build and debug tools
	toolsOutput = new QListWidget();
	toolsOutput->setFont( BotNeumannApp::getMonospacedFont() );
	toolsOutput->setWordWrap(true);
	toolsOutput->setTextElideMode(Qt::ElideNone); // Avoid ellipsis for large texts
//	toolsOutput->setStyleSheet("QListWidget::item { border-bottom: 1px dashed gray; }");
	QIcon toolsOutputIcon(":/button_code_editor.svg");
	messagesTabWidget->addTab(toolsOutput, toolsOutputIcon, tr("Compile output"));

	// ToDo: Add a third tab: for player's solution input/output
}

MessagesDockWidget::~MessagesDockWidget()
{
}

void MessagesDockWidget::setUnitDescription(const QString &description, bool makeActiveTab)
{
	unitDescription->setHtml(description);
	if ( makeActiveTab )
		messagesTabWidget->setCurrentWidget(unitDescription);
}

void MessagesDockWidget::buildFinished(Compiler* compiler)
{
	// A build process (compiling and linking) has finished. Output from previous compiler calls
	// are outdated, clear them
	toolsOutput->clear();

	// If there are output generated by the compiler, show it
	const QList<Diagnostic*>& diagnostics = compiler->getAllDiagnostics();
	if ( diagnostics.size() > 0 )
	{
		// Show each diagnostic
		for ( int i = 0; i < diagnostics.size(); ++i )
			appendDiagnostic(diagnostics[i]);

		// If this messages dock widget is hidden, make it visible and the tools output tab active
		this->setVisible(true);
		messagesTabWidget->setCurrentWidget(toolsOutput);
	}

	// Always print a result
	const QString& text = tr("Build finished: %1 error(s), %2 warning(s)").arg(compiler->getErrorCount()).arg(compiler->getWarningCount());
	new QListWidgetItem(text, toolsOutput);
}

void MessagesDockWidget::appendDiagnostic(const Diagnostic* diagnostic)
{
	Q_ASSERT(diagnostic);

	// Create a list item with icon according to the severity of the diagnostic.
	// The text may be multiline. The constructor adds the item to the list widget automatically
	QIcon icon( diagnostic->getSeverityIcon() );
	QListWidgetItem* listItem = new QListWidgetItem(icon, diagnostic->buildUserText(), toolsOutput);

	// Provide some styles
	listItem->setForeground( diagnostic->getSeverityColor() );
}
