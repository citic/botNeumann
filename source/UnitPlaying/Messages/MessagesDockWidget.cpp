#include "BotNeumannApp.h"
#include "Compiler.h"
#include "Diagnostic.h"
#include "MessagesDockWidget.h"
#include <QTabWidget>
#include <QTextEdit>

MessagesDockWidget::MessagesDockWidget(QWidget* parent, Qt::WindowFlags flags)
	: QDockWidget("Messages", parent, flags)
{
	// QMainWindow requires all its direct children have a name to store preferences
	setObjectName("messagesDockWidget");

	// Each message control is placed within a tab control
	messagesTabWidget = new QTabWidget(this);
	setWidget(messagesTabWidget);

	// Add the first tab (page): the unit problem description
	unitDescription = new QTextEdit();
	QIcon unitDescriptionIcon(":/button_information.svg");
	messagesTabWidget->addTab(unitDescription, unitDescriptionIcon, tr("Description"));

	// Add the second tab: output generated by build and debug tools
	toolsOutput = new QTextEdit();
	toolsOutput->setReadOnly(true);
	toolsOutput->document()->setDefaultFont( BotNeumannApp::getMonospacedFont() );
	toolsOutput->document()->setDefaultStyleSheet(".warning {color: blue} .error {color: red}");
	QIcon toolsOutputIcon(":/button_code_editor.svg");
	messagesTabWidget->addTab(toolsOutput, toolsOutputIcon, tr("Compile output"));

	// ToDo: Add a third tab: for player's solution input/output
}

MessagesDockWidget::~MessagesDockWidget()
{
}

void MessagesDockWidget::setUnitDescription(const QString &description, bool makeActiveTab)
{
	unitDescription->setHtml(description);
	if ( makeActiveTab )
		messagesTabWidget->setCurrentWidget(unitDescription);
}

void MessagesDockWidget::buildFinished(Compiler* compiler)
{
	// A build process (compiling and linking) has finished. Output from previous compiler calls
	// are outdated, clear them
	toolsOutput->setPlainText("");

	// If there are output generated by the compiler, show it
	const QList<Diagnostic*>& diagnostics = compiler->getAllDiagnostics();
	if ( diagnostics.size() > 0 )
	{
		// Show each diagnostic
		for ( int i = 0; i < diagnostics.size(); ++i )
			appendDiagnostic(diagnostics[i]);

		// If this messages dock widget is hidden, make it visible and the tools output tab active
		this->setVisible(true);
		messagesTabWidget->setCurrentWidget(toolsOutput);
	}

	// Always print a result
	toolsOutput->append(tr("Compilation finished: %1 error(s), %2 warning(s)\n").arg(compiler->getErrorCount()).arg(compiler->getWarningCount()));
}

void MessagesDockWidget::appendDiagnostic(const Diagnostic* diagnostic)
{
	Q_ASSERT(diagnostic);

	// To extract only the file name, instead of the complete path
	QFileInfo fileInfo( diagnostic->getFilename() );

	//toolsOutput->insertHtml(QString("<p class='%1'>%2:%3:%4: %5: %6</p>\n\n")
	toolsOutput->append(QString("%1:%2:%3: %4: %5\n%6\n")
		.arg(fileInfo.fileName())
		.arg(diagnostic->getLine())
		.arg(diagnostic->getColumn())
		.arg(diagnostic->getSeverityText())
		.arg(diagnostic->getBrief())
		.arg(diagnostic->getExplanation()) );
}
