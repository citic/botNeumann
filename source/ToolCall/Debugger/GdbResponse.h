#ifndef GDBRESPONSE_H
#define GDBRESPONSE_H

#include "GdbItemTree.h"
#include <QString>

/// AsyncClass (or reason)
enum class AsyncClass
{
	AC_STOPPED,
	AC_RUNNING,
	AC_THREAD_CREATED,
	AC_THREAD_GROUP_ADDED,
	AC_THREAD_GROUP_STARTED,
	AC_LIBRARY_LOADED,
	AC_BREAKPOINT_CREATED,
	AC_BREAKPOINT_MODIFIED,
	AC_BREAKPOINT_DELETED,
	AC_THREAD_EXITED,
	AC_THREAD_GROUP_EXITED,
	AC_LIBRARY_UNLOADED,
	AC_THREAD_SELECTED,
	AC_DOWNLOAD,
	AC_CMD_PARAM_CHANGED,

	AC_UNKNOWN
};

/// For RESULT records generated by GDB, such as '(gdb)'
enum GdbResult
{
	GDB_DONE = 0,
	GDB_RUNNING,
	GDB_CONNECTED,
	GDB_ERROR,
	GDB_EXIT,
	GDB_UNKNOWN
};

/** Parses the output generated by GDB when a command is executed by GDB **/
class GdbResponse
{
	Q_DISABLE_COPY(GdbResponse)

  public:
	typedef enum
	{
		UNKNOWN = 0,
		RESULT,
		CONSOLE_STREAM_OUTPUT,
		TARGET_STREAM_OUTPUT,
		LOG_STREAM_OUTPUT,
		TERMINATION,
		STATUS_ASYNC_OUTPUT,
		NOTIFY_ASYNC_OUTPUT,
		EXEC_ASYNC_OUTPUT,

		TYPE_COUNT
	} Type;

  protected:
	/// The type of output message/line generated by GDB
	Type type = UNKNOWN;
	/// If this output comes from an ASYNC GDB line, this is the "type" of record
	/// something like "thread-created" or "thread-group-added" or "running" or "stopped"
	AsyncClass reason = AsyncClass::AC_UNKNOWN;
	/// If this output is a RESULT record, this is the reason of the result
	GdbResult result = GDB_UNKNOWN;
	/// The text in stream records, e.g: ~"Copyright (C) 2015 Free Software Foundation, Inc.\n"
	QString text;
	/// A tree of items that are part of the generated line by GDB, when a text is not enough?
	GdbItemTree itemTree;
	/// This is a response for the command with this number
	size_t commandNumber = 0;
	/// The user data of the command is copyied to this response
	int userData = 0;

  public:
	/// Constructor
	explicit GdbResponse(Type type, int userData = 0, size_t commandNumber = 0) : type(type), commandNumber(commandNumber), userData(userData) { }

	/// Get the enumeration type of this GDB response
	inline Type getType() const { return type; }
	/// Changes the type of this output response
	void setType(Type type);
	/// Get a text version of the type of this output response
	inline QString getTypeString() const { return mapTypeToString(this->type); }
	/// Maps the given ASYNC reason to the enumeration value
	static const char* mapTypeToString(Type outputType);

	/// Get access to the stream record text
	inline const QString& getText() const { return text; }
	/// Sets the stream record text
	inline void setText(const QString& text) { this->text = text; }

	/// Get the ASYNC reason value
	inline AsyncClass getReason() const { return reason; }
	/// Get a text version of the type of this output response
	inline QString getReasonString() const { return mapReasonToString(this->reason); }
	/// Maps the given ASYNC reason to the enumeration value
	static AsyncClass mapTextToReason(const QString& reason);
	/// Maps the given ASYNC reason to the enumeration value
	static const char* mapReasonToString(AsyncClass outputType);

	/// Get access to the result type if this is a RESULT record
	inline GdbResult getResult() const { return result; }
	/// Changes the result type if this is a RESULT record
	inline void setResult(GdbResult result)  { this->result = result; }
	/// Maps the given text to the enumeration value
	static GdbResult mapTextToResult(const QString& resultClass);
	/// Maps the given result type to a string
	static const char* mapResultToString(GdbResult result);
	/// Give s textual description of the result type of this output
	inline QString getResultString() const { return mapResultToString(this->result); }

	/// Get read-write access to the item tree
	inline GdbItemTree& getItemTree() { return this->itemTree; }
	/// Get read-only access to the item tree
	inline const GdbItemTree& getItemTree() const { return this->itemTree; }
	/// Shortcut to access the root item
	inline GdbTreeNode* getRootItem() { return itemTree.getRoot(); }

	/// Get access to the command number that generated this response, 0 if unknown
	inline size_t getCommandNumber() const { return commandNumber; }
	/// Set the command number that generated this response
	inline void setCommandNumber(size_t number) { this->commandNumber = number; }

	/// Get access to the user data (context) of the command that generated this answer
	inline int getUserData() const { return userData; }
	/// Set the user data (context) for this command
	inline void setUserData(int userData) { this->userData = userData; }

	/// @brief Parses 'ASYNC-OUTPUT' type
	/// @return 0 on success, -1 on error
	int parseAsyncOutput(const QString& reason);
	/// Builds a description of this output response
	/// @param includeItemTree true if the item tree should be included in description
	QString buildDescription(bool includeItemTree) const;
};

#endif // GDBRESPONSE_H
