#ifndef GDBTOKEN_H
#define GDBTOKEN_H

#include <QList>
#include <QString>

/**
	A piece of output generated by GDB, for example, parsing the generated line by GDB:

		=thread-group-added,id="i1"\n

	produces 6 tokens:

	  GdbToken(KEY_EQUAL, "=")
	  GdbToken(VAR,       "thread-group-added")
	  GdbToken(KEY_COMMA, ",")
	  GdbToken(VAR,       "id")
	  GdbToken(KEY_EQUAL, "=")
	  GdbToken(C_STRING,  "i1")
**/
class GdbToken
{
	Q_DISABLE_COPY(GdbToken)

  public:
	/// The types of tokens generated by GDB
	enum Type
	{
		UNKNOWN,
		C_STRING,
		KEY_EQUAL,
		KEY_LEFT_BRACE,
		KEY_RIGHT_BRACE,
		KEY_LEFT_BAR,
		KEY_RIGHT_BAR,
		KEY_UP,
		KEY_PLUS,
		KEY_COMMA,
		KEY_TILDE,
		KEY_SNABEL,
		KEY_STAR,
		KEY_AND,
		END_CODE,
		VAR,
	};

  protected:
	/// The type of token that this object is
	Type type;
	/// The piece of text that generated this token
	QString text;
	/// Tokens may carry the number of the command they belong (valid only for first token)
	size_t commandNumber = 0;

  public:
	/// Constructor
	explicit GdbToken(Type type, const QString& text = "");
	/// Static function that parses a line of GDB output and slices it into a list of tokens
	static QList<GdbToken*> tokenize(const QString& line);
	/// Gets the enumerated type of this token
	inline Type getType() const { return this->type; }
	/// Gets the type of this token as a string
	inline const char* getTypeString() const { return mapTypeToString(this->type); }
	/// Maps a enumerated type to a textual representation
	static const char* mapTypeToString(Type type);
	/// Gets the tesxt content of this token, such as a variable name or "(gdb)" for END_CODE
	inline const QString& getText() const { return this->text; }
	/// Builds a description of this output response
	QString buildDescription() const;
	/// Get access to the command number where this token appears
	inline size_t getCommandNumber() const { return commandNumber; }
	/// Set the command number where this token appeared
	inline void setCommandNumber(size_t number) { this->commandNumber = number; }

  protected:
	/// Called from @a tokenize() when one more character of this token is found
	inline void appendText(QChar ch) { text += ch; }
	/// Changes the type of this token when the tokenizer has such information
	inline void setType(Type type) { this->type = type; }
	/// Called from @a tokenize() to determine the type of token from a special char
	/// For example: '=' creates a KEY_EQUAL token
	static Type mapTokenType(QChar ch);
};

#endif // GDBTOKEN_H
