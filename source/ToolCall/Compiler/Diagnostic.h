#ifndef DIAGNOSTIC_H
#define DIAGNOSTIC_H

#include <QColor>
#include <QIcon>
#include <QString>

// Adapted from <clang-c/Index.h>
enum class DiagnosticSeverity
{
	ignored, // A diagnostic that has been suppressed, e.g., by a command-line
	note, // A note that should be attached to the previous (non-note) diagnostic
	warning, // Indicates suspicious code that may not be wrong
	error, // indicates that the code is ill-formed
	fatal, // error such that future parser recovery is unlikely to produce useful results
	unknown // botNeumann problems trying to get the severity from compiler's output
};

/**
	@brief A warning or error found by the LLVM/Clang compiler
 */
class Diagnostic
{
	Q_DISABLE_COPY(Diagnostic)

  protected:
	/// A enum value indicating if it is a warning, error or fatal error
	DiagnosticSeverity severity;
	/// The filename where the warning or error was found
	QString filename;
	/// The line where the warning or error is presumed to be produced
	unsigned line;
	/// The column where the warning or error is presumed to be produced
	unsigned column;
	/// A short text line of the diagnostic (warning or error)
	QString brief;
	/// An user friendly explanation of the diagnostic (warning or error)
	QString explanation;

  public:
	/// Constructor
	explicit Diagnostic();
	/// Destructor
	virtual ~Diagnostic();
	/// A enum value indicating if it is a warning, error or fatal error
	inline DiagnosticSeverity getSeverity() { return severity; }
	/// Returns an English word to refer the severity
	QString getSeverityText() const;
	/// Given an English text, matches its severity
	static DiagnosticSeverity mapSeverityText(const QString& text);
	/// Returns a color to paint this diagnostic according to its severity
	virtual QColor getSeverityColor() const { return mapSeverityColor(severity); }
	/// Given a severity, returns a color to paint it to help user to identify it visually
	static QColor mapSeverityColor(DiagnosticSeverity severity);
	/// Returns an icon accordin to the severity of this diagnostic
	virtual QIcon getSeverityIcon() const { return mapSeverityIcon(severity); }
	/// Given a severity, returns an icon to represent the severity
	static QIcon mapSeverityIcon(DiagnosticSeverity severity);
	/// Returns true if this diagnostic is a normal or fatal error
	/// Therefore, the code cannot be run
	inline bool isError() const { return severity == DiagnosticSeverity::error || severity == DiagnosticSeverity::fatal; }
	/// Returns true if this diagnostic is a warning, note or ignored
	/// Therefore, the code could be run
	inline bool isIgnorable() const { return severity <= DiagnosticSeverity::warning || severity == DiagnosticSeverity::unknown; }
	/// The filename where the warning or error was found
	inline const QString& getFilename() const { return filename; }
	/// The line where the warning or error is presumed to be produced
	inline unsigned getLine() const { return line; }
	/// The column where the warning or error is presumed to be produced
	inline unsigned getColumn() const { return column; }
	/// An user friendly explanation of the diagnostic (warning or error)
	inline const QString& getBrief() const { return brief; }
	/// Generated by lexer, syntax, semantic
	inline const QString& getExplanation() const { return explanation; }
	/// Appends the given line to the explanation
	void appendExplanation(const QString& text);
	/// Generates a text line to the user, in order to understand the diagnostic
	virtual QString buildUserText() const = 0;
};

#endif // DIAGNOSTIC_H
