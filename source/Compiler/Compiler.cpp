#include "Compiler.h"

extern "C"
{
#include <clang-c/Index.h>
}

// --- --- ClangData struct --- ---

struct ClangData
{
	// Set of translation units (parsed source files) that may link into an executable or library.
	// May be many translation units in an index
	CXIndex index;
	// Basic unit of compilation in C++. Is a single source file plus any header files directly or
	// indirectly included
	CXTranslationUnit translationUnit;

  public:
	/// Constructor
	ClangData();
	/// Destructor
	~ClangData();
};

ClangData::ClangData()
	: index(clang_createIndex(false, false))
	, translationUnit(nullptr)
{
}

ClangData::~ClangData()
{
	// The translation unit and the index were created in dynamic memory, release it
	clang_disposeTranslationUnit(translationUnit);
	clang_disposeIndex(index);
}


// --- --- Compiler class --- ---

Compiler::Compiler(QObject *parent)
	: QObject(parent)
	, clangData(nullptr)
{
}

Compiler::~Compiler()
{
	delete clangData;
}

void Compiler::compile(const QString& filename)
{
	// Create a compilation context for this file
	delete clangData;
	clangData = new ClangData();

	// The given file by parameter will be compiled as any other file. We can pass compiler
	// arguments using an C-style array. We send default include directories as an example
	const char* cxxArgs[] =
	{
		"-I/usr/include",
		"-I."
	};

	// Number of command line arguments to be sent to the compiler
	const int cxxArgCount = sizeof(cxxArgs) / sizeof(cxxArgs[0]);

	// Compile the given file, a CLang translation unit will be generated in dynamic memory
	clangData->translationUnit = clang_parseTranslationUnit(clangData->index, filename.toStdString().c_str(), cxxArgs, cxxArgCount, nullptr, 0, CXTranslationUnit_None);
/*
	// Iterate through all diagnostics (warnings and errors) generated by Clang
	unsigned diagnosticCount = clang_getNumDiagnostics(translationUnit);
	for (unsigned i = 0; i < diagnosticCount; ++i)
	{
		// Get the diagnostic (warning or error)
		CXDiagnostic diagnostic = clang_getDiagnostic(translationUnit, i);
		// Print it in user-friendly format
		printDiagnostic(diagnostic);
	}
*/
}

void Compiler::compile(const QStringList& filenames)
{
	// Not implemented yet
	Q_ASSERT(false);
	Q_UNUSED(filenames);
}
