#ifndef LOGMANAGER_H
#define LOGMANAGER_H

#include <QObject>
#include <QFile>
#include <QLoggingCategory>

/// Logs general events related to the botNeumann application
Q_DECLARE_LOGGING_CATEGORY(logApplication)
/// Logs events related to building player solution and its compiling errors
Q_DECLARE_LOGGING_CATEGORY(logBuild)
/// Logs events related to the debugger extraction objects
Q_DECLARE_LOGGING_CATEGORY(logDebugger)
/// Logs events related to the editing process
Q_DECLARE_LOGGING_CATEGORY(logEditor)
/// Logs events related to not-implemented functionality
Q_DECLARE_LOGGING_CATEGORY(logNotImplemented)
/// Logs events related to the user progress through the game
Q_DECLARE_LOGGING_CATEGORY(logPlayer)
/// Logs events related to the controller in charge of the visualization process
Q_DECLARE_LOGGING_CATEGORY(logVisualizator)

/** Manages a log file to store events generated by players that will be used to data analysis

	The log manager also has functionality to upload logs to a central network server
**/
class LogManager : public QObject
{
	Q_OBJECT
	Q_DISABLE_COPY(LogManager)

  protected:
	/// The log file keeps open while the botNeumann instance is running
	static QFile logFile;

  public:
	/// Constructor
	explicit LogManager(QObject *parent = nullptr);
	/// Destructor
	virtual ~LogManager();
	/// Called by the q functions: Info, Debug, Warning, Critical, Fatal
	static void messageHandler(QtMsgType type, const QMessageLogContext& context, const QString& message);
	/// Get the log file name for this device
	static QString getLogFilename();
	/// Builds a new file name for this device
	/// This function is only called once on a device
	static QString buildLogFilename(bool saveInSettings);
};

#endif // LOGMANAGER_H
